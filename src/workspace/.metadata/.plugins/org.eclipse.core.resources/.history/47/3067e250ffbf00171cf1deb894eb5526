class Artista{
	var nombre
	var grupo=[]
	var estado
	var habilidad 
	var criterioDeCobro
	var albunes
	var tipo
	constructor(unNombre,unEstado,unaHabilidad,unCriterioDeCobro,unosAlbunes,unTipo){
		nombre=unNombre
		estado=unEstado
		habilidad=unaHabilidad
		criterioDeCobro=unCriterioDeCobro
		albunes=unosAlbunes
		tipo=unTipo
	}

	method estado()=estado
	method tipo()=tipo
	method cambiarTipo(nuevoTipo){tipo=nuevoTipo}
	method habilidadSola()=habilidad
	method criterioDeCobro()=criterioDeCobro
	method grupo()=grupo
	method agregarAGrupo(grupoAEntrar){grupo.add(grupoAEntrar)
										self.cambiarEstado(new MusicoDeGrupo(-20))
										
	}
	method cambiarEstado(unEstado){estado=unEstado}
	method salirDeGrupo(grupoASalir){grupo.remove(grupoASalir)
		
	}
	method cambiarCriterioDeCobro(nuevoCriterio){criterioDeCobro=nuevoCriterio}
	method albunes()=albunes
	method habilidad()=self.estado().habilidad(self.habilidadSola())
	
	method interpretaBien(unaCancion)= self.estado().laInterpretaBien(unaCancion)|| self.habilidad()>60 || self.albunes().any({albun=>albun.tieneCancion(unaCancion)})||self.tipo().laInterpretaBien(unaCancion)
	method cobrar(lugar){return self.criterioDeCobro().cobrar(lugar,self)}
	method esMinimalista(){return self.albunes().all({albun=>albun.albumCorto()})}
	method duracionDeAlbunes(){return self.albunes().sum({albun=>albun.duracionAlbum()})}
	method totalUnidadesSalidas(){return self.albunes().sum({albun=>albun.unidadesSalidas()})}
	method totalUnidadesVendidas(){return self.albunes().sum({albun=>albun.unidadesVendidas()})}
	method laPego(){return self.totalUnidadesVendidas()>self.totalUnidadesSalidas()*0.75}
	method puedeTocarBien(canciones){return canciones.filter({cancion=>self.interpretaBien(cancion)})}
}
class MusicoDeGrupo {
    const cuantoAumentaLaHabilidad
    constructor(cuantoAumenta){
        cuantoAumentaLaHabilidad = cuantoAumenta
    }
    method cuantoAumentaLaHabilidad() = cuantoAumentaLaHabilidad
    
    method habilidad(habilidadBase) = habilidadBase + self.cuantoAumentaLaHabilidad()
    
    method laInterpretaBien(unaCancion) = unaCancion.duracion() > 300
    method cobrar(dinero)= dinero/2
   }

class Solista {
    const palabraParaInterpretarBien
    constructor(unaPalabraParaInterpretarBien){
        palabraParaInterpretarBien = unaPalabraParaInterpretarBien
    }
    
    method palabraParaInterpretarBien() = palabraParaInterpretarBien
    
    method habilidad(habilidadBase) = habilidadBase
    
    method laInterpretaBien(unaCancion) = unaCancion.letra().contains(self.palabraParaInterpretarBien())
    
    method cobrar(dinero)= dinero
    }

class LuisAlberto{
		var guitarra
	constructor(unaGuitarra){guitarra=unaGuitarra}	
		
	
	
	
	
	method laInterpretaBien(unaCancion)=true
	
	method guitarra()=guitarra
	method habilidad(unaHabilidad){
	 	
	 	return (self.guitarra().unidadGuitarra()*8).min(100)
	 	
	 }
}

class Palabreros{
	var palabra
	constructor(unaPalabra){palabra=unaPalabra}
	method palabra()=palabra
	method laInterpretaBien(unaCancion) = unaCancion.letra().contains(self.palabra())
    
    
}
class Largueros{
	var segundos
	constructor(unosSegundos){segundos=unosSegundos}
	method segundos()=segundos
	method laInterpretaBien(unaCancion) = unaCancion.duracion()>self.segundos()
    
}

class Impareros{
	method laInterpretaBien(unaCancion)=unaCancion.duracion().odd()
}




class PorCapacidad {
	var capacidad
	var dinero
	constructor(unaCapacidad,unDinero){
		capacidad=unaCapacidad
		dinero=unDinero
	}
	
	method cobrar(lugar,musico){
	if(lugar.capacidad()>capacidad)
		return 500
		else return 400}
}
class CantidadEnGrupo {
	var dinero
	constructor(unDinero){dinero=unDinero}
	method dinero()=dinero
	method cobrar(lugar,musico){
		
			musico.estado().cobrar(self.dinero())
		
	}
}
class FechaConcierto {
	var dinero
	var dia
	var mes
	var anio
	var inflacion
		constructor(unDinero,unDia,unMes,unAnio,unaInflacion){dinero=unDinero
			dia=unDia
			mes=unMes
			anio=unAnio
			inflacion=unaInflacion
		}
		method cobrar(lugar,musico){
		
		if(new Date(dia,mes,anio)<new Date(lugar.dia(),lugar.mes(),lugar.anio()))
		return dinero
		else return dinero*inflacion
	
	}	
}





	

		
object fender{
	var unidadGuitarra=10
	method unidadGuitarra()=unidadGuitarra
	}
object gibson{
	var estado
	var unidadGuitarra
	method estadoMalo(){estado="malo"}
	method estadoBuena(){estado="bueno"}
	method estado()=estado
	method unidadGuitarra(){
		if (self.estado()=="bueno"){
		unidadGuitarra=15
		return unidadGuitarra}
		else{ unidadGuitarra=5
			return unidadGuitarra
		}
		
	}
}
class Lugar{
	var personasQueTocan
	var dia
	var mes
	var anio
	var capacidad
	constructor(unasPersonasQueTocan,unDia,unMes,unAnio,unaCapacidad){
		personasQueTocan=unasPersonasQueTocan
		dia=unDia
		mes=unMes
		anio=unAnio
		
		capacidad=unaCapacidad
	}
	method dia()=dia
	method mes()=mes
	method anio()=anio
	method personasQueTocan()=personasQueTocan
	method capacidad()=capacidad
	method tienenQuePagar(){
		return personasQueTocan.sum({persona=>persona.cobra(self)})
	}
}



class Cancion{
	var nombre
	var duracion
	var letra
	constructor(unNombre,unaDuracion,unaLetra){
		nombre=unNombre
		duracion=unaDuracion
		letra=unaLetra
	}
	method nombre()=nombre
	method letra()=letra.fold("",{unString,otroString=>unString+" "+otroString}).drop(1)
	method duracion()=duracion
	method longitudCancion(){
		return self.letra().size()
	}
	method durasMasQue(otraCancion){
		return self.duracion()>otraCancion.duracion()
	}
	method sosMasLarga(otraCancion){
		return self.longitudCancion()>otraCancion.longitudCancion()
	}
	method tienenNombresDiferentes(otraCancion){
		return self.nombre()!=otraCancion.nombre()
	}
}

class Remix inherits Cancion{
	var cancion
	constructor(unNombre,unaDuracion,unaLetra,unaCancion)=super(unNombre,unaDuracion,unaLetra){
		cancion=unaCancion
	}
	override method duracion(){
		return cancion.duracion()*3
	}
	override method letra(){
		return "mueve tu cuelpo baby " + cancion.letra() + " yeah oh yeah"
	}
	
}

class Mashup inherits Cancion{
	var canciones
	
	constructor(unNombre,unaDuracion,unaLetra,unasCanciones)=super(unNombre,unaDuracion,unaLetra){
		canciones=unasCanciones
		
	}
	method canciones()=canciones
	override method duracion(){ return self.canciones().max({cancion=>cancion.duracion()})	
	}
	override method letra()= self.canciones().fold("",{primeraCancion, otraCancion =>primeraCancion + " " + otraCancion.letra()}).drop(1)
	}

class Album{
	var nombre
	var diaSalida
	var mesSalida
	var anioSalida
	var canciones
	var unidadesALaVenta
	var unidadesVendidas
	
	constructor(unNombre,unDiaSalida,unMesSalida,unAnioSalida,unasCanciones,unasUnidadesALaVenta,unasUnidadesVendidas){
	nombre=unNombre
	diaSalida=unDiaSalida
	mesSalida=unMesSalida
	anioSalida=unAnioSalida
	canciones=unasCanciones
	unidadesALaVenta=unasUnidadesALaVenta
	unidadesVendidas=unasUnidadesVendidas
	}
	
	method nombre()=nombre
	method canciones()=canciones
	method unidadesSalientes()=unidadesALaVenta
	method unidadesVendidas()=unidadesVendidas
	method duracionAlbum(){return self.canciones().sum({cancion=>cancion.duracion()})
	}
	method albumCorto(){return self.canciones().all({cancion=>cancion.duracion()<180})}
	method cancionMasLarga(){ return self.canciones().max({cancion=>cancion.longitudCancion()})}
	method cancionMasDuradera(){ return self.canciones().max({cancion=>cancion.duracion()})
		
	}
	method tieneCancion(unaCancion)= self.canciones().contains(unaCancion)
}

class Presentacion {
    var musicos = []
    var lugar
    var dia
    var mes
    var anio
    var criterios
    constructor(unLugar, unDia, unMes, unAnio,unosCriterios){
    	lugar=unLugar
    	dia=unDia
    	mes=unMes
    	anio=unAnio
    	criterios=unosCriterios
    }
    method esConcurrida() = self.capacidad() > 5000
    method capacidad() = self.lugar().capacidad()
    method musicoCumpleCriterios(musico) = return criterios.forEach({criterio => criterio.musicoCumpleCriterio(musico)})
    method agregarMusico (musico){
		self.musicoCumpleCriterios(musico)
		self.musicos().add(musico)
}
    
    method bandaCumpleCriterios(unGrupo) = return unGrupo.integrantes().forEach({integrante => self.musicoCumpleCriterios(integrante)})
	method agregarBanda(unGrupo){
		self.bandaCumpleCriterios(unGrupo)
		self.musicos().agregarMusico(unGrupo)
}
    method musicos() = musicos
    method musicos(nuevosMusicos){
        self.musicos().clear()
        self.musicos().addAll(nuevosMusicos)
    }
    method lugar() = lugar
    method lugar(nuevoLugar) {
        lugar = nuevoLugar
    }
   
    method costo() = self.musicos().sum({musico => musico.cobrar(self.lugar())})
    method magia() = self.musicos().sum({musico=>musico.habilidad()})
    method soloToca(unMusico) = self.musicos() == [unMusico]
}

class Criterio{
	
	method musicoCumpleCriterio(musico) = true
}

class CriterioPorHabilidad{
	var habilidadNecesaria
	
	constructor(unaHabilidad){
		habilidadNecesaria = unaHabilidad
	}
	
	method musicoCumpleCriterio(musico){
		if(musico.habilidad() < habilidadNecesaria )
			throw new NoCumpleCriterio ("El musico no tiene la habilidad necesaria") 
   		
	}
}
class CriterioPorObra{
	
	method musicoCumpleCriterio(musico){
		if(musico.albunes().isEmpty())
		 	throw new NoCumpleCriterio ("El musico no publico suficientes canciones")
	}
}

class CriterioPorCancion{
	var cancionNecesaria
	constructor(unaCancion){
		cancionNecesaria = unaCancion
	}
	
	method musicoCumpleCriterio(musico){
		if (!musico.interpretaBien(cancionNecesaria))
			throw new NoCumpleCriterio ("El musico no puede interpretar la cancion requerida")
	}
}




class NoCumpleCriterio inherits Exception{}


class Grupo {
	var nombre
	var integrantes = [ ]
	var representante
	var albumesPublicados= [ ]

	
	constructor(unNombre, losIntegrantes, unRepresentante, albumes){
		nombre = unNombre
		integrantes = losIntegrantes
		representante = unRepresentante
		albumesPublicados = albumes
	}
	
	method nombre() = nombre
	method integrantes() = integrantes
	method representante() = representante
	method albumesPublicados() = albumesPublicados
	method cancionesPublicadas() = return albumesPublicados.flatMap({album => album.canciones()})
	method esDeSuAutoria(cancion) = return self.cancionesPublicadas().contains(cancion)
	method habilidadIntegrantes() = self.integrantes().sum({integrante => integrante.habilidad()}) 
	method habilidad() = return self.habilidadIntegrantes() + self.habilidadIntegrantes()*0.1
	method contieneIntegrante(musico) = self.integrantes().contains(musico)
	method esGrupoSolista() = return self.integrantes().size() == 1
	method cobrar(presentacion) = return self.integrantes().sum({integrante => integrante.cobrar(presentacion.lugar())}) + representante.cuantoCobra(presentacion)
	method agregarMusico (musico) {
		integrantes.add(musico)
		}
	method interpretaBien(cancion) = return self.integrantes().all({integrante => integrante.interpretaBien(cancion)})

}

class Representante{
	var sueldo
	
	constructor(unSueldo){
		sueldo = unSueldo
	}
	method cuantoCobra(presentacion) = sueldo
}